@model List<DisplayProductInShopVM>

<!-- Single Page Header start -->
<div class="container-fluid page-header py-5">
    <h1 class="text-center text-white display-6">Shop</h1>
    <ol class="breadcrumb justify-content-center mb-0">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
        <li class="breadcrumb-item active text-white">Shop</li>
    </ol>
</div>
<!-- Single Page Header End -->

<!-- Fruits Shop Start-->
<div class="container-fluid fruite py-5">
    <div class="container py-5">
        <div class="tab-class text-center">
            <div class="row g-4">
                <div class="col-lg-4 text-start">
                    <h1>Our Products</h1>
                </div>

                <div class="col-lg-4">
                    <div class="search-container">
                        <input id="searchInput" class="search-input form-control" type="search" placeholder="Search" />
                        <i class="bx bx-search search-icon" onclick="focusSearchInput()"></i>
                    </div>
                </div>

                <div class="col-lg-4 text-end">
                    <ul class="nav nav-pills d-inline-flex text-center mb-5 nav-custom">
                        <!-- All products -->
                        <li class="nav-item">
                            <a class="nav-link active" data-bs-toggle="pill" href="#tab-1">All Products</a>
                        </li>

                        <!-- Fruits Dropdown -->
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown">Fruits</a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" data-bs-toggle="pill" href="#tab-2">All Fruits</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" data-bs-toggle="pill" href="#tab-4">Fresh Fruits</a></li>
                                <li><a class="dropdown-item" data-bs-toggle="pill" href="#tab-5">Organic Fruits</a></li>
                            </ul>
                        </li>

                        <!-- Vegetables Dropdown -->
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown">Vegetables</a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" data-bs-toggle="pill" href="#tab-3">All Vegetables</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" data-bs-toggle="pill" href="#tab-6">Fresh Vegetables</a></li>
                                <li><a class="dropdown-item" data-bs-toggle="pill" href="#tab-7">Organic Vegetables</a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
            <form id="anti-forgery-form" style="display:none;">
                @Html.AntiForgeryToken()
            </form>

            <div class="tab-content">
                <!-- All Products Tab -->
                <div id="tab-1" class="tab-pane fade show p-0 active">
                    <div class="row g-4">
                        <div class="col-lg-12">
                            <div class="row g-4" id="products-container-tab-1"></div>
                        </div>
                    </div>
                </div>

                <!-- All Fruits Tab -->
                <div id="tab-2" class="tab-pane fade show p-0">
                    <div class="row g-4">
                        <div class="col-lg-12">
                            <div class="row g-4" id="products-container-tab-2"></div>
                        </div>
                    </div>
                </div>

                <!-- All Vegetables Tab -->
                <div id="tab-3" class="tab-pane fade show p-0">
                    <div class="row g-4">
                        <div class="col-lg-12">
                            <div class="row g-4" id="products-container-tab-3"></div>
                        </div>
                    </div>
                </div>

                <!-- Fresh Fruits Tab -->
                <div id="tab-4" class="tab-pane fade show p-0">
                    <div class="row g-4">
                        <div class="col-lg-12">
                            <div class="row g-4" id="products-container-tab-4"></div>
                        </div>
                    </div>
                </div>

                <!-- Organic Fruits Tab -->
                <div id="tab-5" class="tab-pane fade show p-0">
                    <div class="row g-4">
                        <div class="col-lg-12">
                            <div class="row g-4" id="products-container-tab-5"></div>
                        </div>
                    </div>
                </div>

                <!-- Fresh Vegetables Tab -->
                <div id="tab-6" class="tab-pane fade show p-0">
                    <div class="row g-4">
                        <div class="col-lg-12">
                            <div class="row g-4" id="products-container-tab-6"></div>
                        </div>
                    </div>
                </div>

                <!-- Organic Vegetables Tab -->
                <div id="tab-7" class="tab-pane fade show p-0">
                    <div class="row g-4">
                        <div class="col-lg-12">
                            <div class="row g-4" id="products-container-tab-7"></div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<!-- Fruits Shop End-->
<script>
// ===== GLOBAL STATE ===== //
const tabConfig = {
    'tab-1': { category: '', subCategory: '' },
    'tab-2': { category: 'Fruits', subCategory: '' },
    'tab-3': { category: 'Vegetables', subCategory: '' },
    'tab-4': { category: 'Fruits', subCategory: 'Fresh Fruits' },
    'tab-5': { category: 'Fruits', subCategory: 'Organic Fruits' },
    'tab-6': { category: 'Vegetables', subCategory: 'Fresh Vegetables' },
    'tab-7': { category: 'Vegetables', subCategory: 'Organic Vegetables' }
};
const pageSize = 8;
let loadingStates = {};
let currentPages = {};
let hasMoreData = {};
let activeTabId = 'tab-1';
let searchTimeout;
let currentSearchQuery = '';

// ===== CORE FUNCTIONS ===== //

function initializeTabs() {
    Object.keys(tabConfig).forEach(tabId => {
        loadingStates[tabId] = false;
        currentPages[tabId] = 1;
        hasMoreData[tabId] = true;
    });
}

async function loadProducts(tabId, reset = false) {
    if (loadingStates[tabId] || !hasMoreData[tabId]) return;
    
    loadingStates[tabId] = true;
    const container = document.getElementById(`products-container-${tabId}`);
    
    if (!reset && container.children.length > 0) {
        container.insertAdjacentHTML('beforeend', 
            '<div class="col-12 text-center py-3" id="loading-indicator">' +
            '<div class="spinner-border text-primary" role="status"></div></div>');
    }

    try {
        const config = tabConfig[tabId];
        const page = reset ? 1 : currentPages[tabId];
        const response = await fetch(
            `/Shop/GetProductsPage?category=${encodeURIComponent(config.category)}` +
            `&subCategory=${encodeURIComponent(config.subCategory)}` +
            `&page=${page}&pageSize=${pageSize}`
        );

        if (!response.ok) throw new Error('Network error');
        const html = await response.text();

        document.getElementById('loading-indicator')?.remove();

        if (html.trim() === '') {
            hasMoreData[tabId] = false;
            if (reset && container.children.length === 0) {
                container.innerHTML = '<div class="col-12 text-center py-5">No products found</div>';
            }
            return;
        }

        if (reset) {
            container.innerHTML = html;
        } else {
            container.insertAdjacentHTML('beforeend', html);
        }

        currentPages[tabId] = page + 1;
    } catch (error) {
        console.error('Load error:', error);
        container.innerHTML = '<div class="col-12 text-center py-5">Error loading products</div>';
    } finally {
        loadingStates[tabId] = false;
    }
}

// ===== SEARCH FUNCTIONS ===== //

async function performSearch(query) {
    currentSearchQuery = query;
    showLoadingInAllTabs();

    try {
        const response = await fetch(`/Shop/SearchProducts?query=${encodeURIComponent(query)}`);
        if (!response.ok) throw new Error('Search failed');
        const products = await response.json();

        // Only show results in active tab
        const activeTab = document.querySelector('.tab-pane.fade.show.active');
        if (!activeTab) return;
        
        const container = document.getElementById(`products-container-${activeTab.id}`);
        container.innerHTML = '';

        if (products.length === 0) {
            showNoResults(query, activeTab.id);
            return;
        }

        await renderSearchResults(products, activeTab.id);
    } catch (error) {
        console.error('Search error:', error);
        showSearchError();
    }
}

function clearSearch() {
    currentSearchQuery = '';
    // Reset all tabs to their normal state
    Object.keys(tabConfig).forEach(tabId => {
        currentPages[tabId] = 1;
        hasMoreData[tabId] = true;
        const container = document.getElementById(`products-container-${tabId}`);
        if (container) {
            container.innerHTML = '';
            // Only load immediately for active tab
            if (tabId === activeTabId) {
                loadProducts(tabId, true);
            }
        }
    });
}

// ===== HELPER FUNCTIONS ===== //

function showLoadingInAllTabs() {
    document.querySelectorAll('[id^="products-container-"]').forEach(container => {
        container.innerHTML = `
            <div class="col-12 text-center py-5">
                <div class="spinner-border text-primary" style="width:3rem;height:3rem"></div>
                <p class="mt-2">Searching...</p>
            </div>`;
    });
}

async function renderSearchResults(products, tabId) {
    try {
        const response = await fetch('/Shop/RenderProductCards', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(products)
        });
        const html = await response.text();
        
        const container = document.getElementById(`products-container-${tabId}`);
        if (container) {
            container.innerHTML = html;
        }
    } catch (error) {
        throw error;
    }
}

function showNoResults(query, tabId) {
    const container = document.getElementById(`products-container-${tabId}`);
    if (container) {
        container.innerHTML = `
            <div class="col-12 text-center py-5">
                <h4>No results for "${query}"</h4>
            </div>`;
    }
}

function showSearchError() {
    const activeTab = document.querySelector('.tab-pane.fade.show.active');
    if (activeTab) {
        document.getElementById(`products-container-${activeTab.id}`).innerHTML = `
            <div class="col-12 text-center py-5">
                <h4 class="text-danger">Search failed</h4>
                <button class="btn btn-primary mt-2" onclick="retrySearch()">Try Again</button>
            </div>`;
    }
}

function retrySearch() {
    const query = document.getElementById('searchInput').value;
    if (query) performSearch(query);
}

// ===== EVENT HANDLERS ===== //

function handleScroll() {
    if (currentSearchQuery) return;
    
    const container = document.getElementById(`products-container-${activeTabId}`);
    if (!container) return;
    
    const scrollPosition = window.innerHeight + window.scrollY;
    const containerBottom = container.offsetTop + container.offsetHeight;
    
    if (scrollPosition > containerBottom - 200 && hasMoreData[activeTabId]) {
        loadProducts(activeTabId);
    }
}

function handleTabChange(event) {
    const targetTabId = event.target.getAttribute('href')?.substring(1);
    if (targetTabId && tabConfig[targetTabId]) {
        activeTabId = targetTabId;
        const container = document.getElementById(`products-container-${targetTabId}`);
        
        if (container) {
            if (currentSearchQuery) {
                // If search is active, clear the tab to prevent showing old results
                container.innerHTML = '';
            } else if (container.children.length === 0) {
                // Only load if empty and no search active
                loadProducts(targetTabId, true);
            }
        }
    }
}

// ===== INITIALIZATION ===== //

document.addEventListener('DOMContentLoaded', function() {
    initializeTabs();
    
    // Initial load
    const initialTab = document.querySelector('.tab-pane.fade.show.active');
    if (initialTab) {
        activeTabId = initialTab.id;
        loadProducts(activeTabId, true);
    }

    // Event listeners
    window.addEventListener('scroll', handleScroll);
    document.querySelectorAll('[data-bs-toggle="pill"]').forEach(tab => {
        tab.addEventListener('shown.bs.tab', handleTabChange);
    });

    // Search input handling
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        if (this.value === '') {
            clearSearch();
        } else {
            searchTimeout = setTimeout(() => performSearch(this.value), 500);
        }
    });
    
    searchInput.addEventListener('search', function() {
        if (this.value === '') {
            clearSearch();
        }
    });
    
    searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
            clearTimeout(searchTimeout);
            if (this.value) performSearch(this.value);
        }
    });
});
</script>
<!-- Search End-->
@section Scripts {
    <script src="~/js/site.js"></script>
}
